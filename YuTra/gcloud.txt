env\Scripts\activate.bat
gcloud --quiet --project agile-team-296603 app deploy app.yaml

m.save(os.getcwd()+'current1.html')
C:\Users\PCUser\Appata\Local\Programs\Python\Python38

gcloud beta compute ssl-certificates describe 
gcloud compute target-https-proxies describe 
firebase init hosting

yutra--
uvicorn main:app --reload
//函館市役所//五稜郭公園/2022/12/12/12/00/10//////
curl https://xosh6e43keuozf5sdgrafdnpem0yyght.lambda-url.ap-northeast-1.on.aws/rdp_control/open --header 'x-api-key:EYzwpAWIFy1h85owcjCD51RSCv6dnjDz1Al4JntW
https://xosh6e43keuozf5sdgrafdnpem0yyght.lambda-url.ap-northeast-1.on.aws/

gcloud config set project agile-team-296603
gcloud builds submit --tag gcr.io/agile-team-296603/toiletmap
gcloud run deploy --image gcr.io/agile-team-296603/toiletmap --platform managed --region=asia-northeast1

gcloud builds submit --tag gcr.io/certain-sky-351912/blog
gcloud run deploy --image gcr.io/certain-sky-351912/blog --platform managed

gcloud config set project theta-messenger-312905
gcloud builds submit --tag gcr.io/theta-messenger-312905/weatherest
gcloud run deploy --image gcr.io/theta-messenger-312905/weatherest --platform managed --region=asia-northeast1
gcloud run --project=agile-team-296603 services update-traffic --to-latest
gcloud compute project-info add-metadata --metadata google-compute-default-region=asia-northeast1,google-compute-default-zone=asia-northeast1-a

        api_transit_a_d='https://transit.router.hereapi.com/v8/routes?apiKey=Lts0Z9yw1iLIhCQs6Z5UiX6LhFAGaO28a2E7Sx7UhoE&origin={d_O_lng},{d_O_lat}&destination={lng},{lat}'
        url_a_d=api_a_d.format(transport=transport,d_O_lat=d_O_lat,o_O_lng=o_O_lng,lat=lat,lng=lng) if transport!='transit' else api_transit_o_a.format(d_O_lat=d_O_lat,d_O_lng=d_O_lng,lat=lat,lng=lng)
        response_a_d = requests.get(url_a_d)
        arr_lat=data_o_a['routes'][0]['sections']['actions']['arrival']['location']['lat'] if transport=='transit' else None
        arr_lng=data_o_a['routes'][0]['sections']['actions']['arrival']['location']['lng'] if transport=='transit' else None
        data_a_d = response_a_d.json()
        url_transit_a_d=api_a_d.format(transport=transport,d_O_lat=d_O_lat,d_O_lng=d_O_lng,lat=dep_lat,lng=dep_lng) if transport!='transit' else None
        response_transit_a_d= requests.get(url_transit_o_a) if transport=='transit' else None
        data_transit_a_d = response_transit_a_d.json()


    wheel_num= ame_R['バリアフリートイレ数'] if 'バリアフリートイレ数' in ame_R else ame_R['車椅子'] if ame_R['車椅子'] !="-" else ame_R['車椅子使用者用トイレ有無']
    baby_num= ame_R['ベビーベッド'] if 'ベビーベッド' in ame_R else ame_R['乳幼児用設備設置トイレ有無']
    ost_num= ame_R['オストメイト使用者用トイレ有無'] if 'オストメイト使用者用トイレ有無' in ame_R else ame_R['オストメイト']
    iframe = '車椅子数:' + str(wheel_num) if wheel == True or wheel_baby == True or wheel_ost == True or wheel_baby_ost == True else 'ベビーベッド数:' + str(baby_num) if baby == True or wheel_baby == True or baby_ost == True or wheel_baby_ost == True else 'オストメイト数:' + str(ost_num) if ost == True or wheel_ost == True or baby_ost == True or wheel_baby_ost == True else ""


____________________________________________________________________
        def closest_od(data,o,d):
            return min(data, key=lambda p: abs(nx.shortest_path_length(G, Orig, ox.distance.nearest_nodes(G, p['緯度'], p['経度']), weight='length').m+nx.shortest_path_length(G, Dest, ox.distance.nearest_nodes(G, p['緯度'], p['経度']), weight='length').m) if nx.shortest_path_length(G, Dest, Orig, weight='length').m*2>(nx.shortest_path_length(G, Orig, ox.distance.nearest_nodes(G, p['緯度'], p['経度']), weight='length').m+nx.shortest_path_length(G, Dest, ox.distance.nearest_nodes(G, p['緯度'], p['経度']), weight='length').m) else False,default="")

        def closest_o(data,o):
            return min(data, key=lambda p: nx.shortest_path_length(G, Orig, ox.distance.nearest_nodes(G, p['緯度'], p['経度']), weight='length').m if nx.shortest_path_length(G, Dest, Orig, weight='length').m*2>nx.shortest_path_length(G, Orig, ox.distance.nearest_nodes(G, p['緯度'], p['経度']), weight='length').m else False, default="")

        def closest_d(data,d):
            return min(data, key=lambda p: nx.shortest_path_length(G, Dest, ox.distance.nearest_nodes(G, p['緯度'], p['経度']), weight='length').m if nx.shortest_path_length(G, Dest, Orig, weight='length').m*2>nx.shortest_path_length(G, Dest, ox.distance.nearest_nodes(G, p['緯度'], p['経度']), weight='length').m else False, default="")


____________________________________________________________________
    if bool(numeric) == True and city == city0 and bool(pref) == True and any(s.startswith(city_pref) for s in place_list) == False:
        print(1.1)
        G = ox.graph.graph_from_place('{h1}, {h2}, JAPAN'.format(h1=city, h2=pref), network_type='drive',simplify=False, retain_all=True, truncate_by_edge=True, clean_periphery=True)
        print(0)
        gdf_nodes, gdf_edges = ox.graph_to_gdfs(G)
        G = ox.projection.project_graph(G)
        Orig_0 = ox.distance.get_nearest_nodes(G, o_O_lat, o_O_lng,method='kdtree')
        solved = False
        while not solved:
            try:
                if 'wheel00' in request.form.getlist('check00'):
                    for i,row in ame_w0.iterrows():
                        w_node = ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    ame_w0 = ame_w0.assign(distance = nx.shortest_path_length(G, Orig_0, w_node, weight = 'length'))
                    ame_w0 = pd.DataFrame(ame_w0, columns = df.columns.values.tolist().append('distance'))
                elif 'baby00' in request.form.getlist('check00'):
                    for i,row in ame_b0.iterrows():
                        b_node= ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    ame_b0 = ame_b0.assign(distance = nx.shortest_path_length(G, Orig_0, b_node, weight = 'length'))
                    ame_b0 = pd.DataFrame(ame_b0, columns = df.columns.values.tolist().append('distance'))

                elif 'ost00' in request.form.getlist('check00'):
                    for i,row in ame_o0.iterrows():
                        o_node = ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    ame_o0 = ame_o0.assign(distance = nx.shortest_path_length(G, Orig_0, o_node, weight = 'length'))
                    ame_o0 = pd.DataFrame(ame_o0, columns = df.columns.values.tolist().append('distance'))

                elif 'wheel00' and 'baby00' in request.form.getlist('check00'):
                    for i,row in ame_w_b0.iterrows():
                        w_bnode = ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    ame_w_b0 = ame_w_b0.assign(distance = nx.shortest_path_length(G, Orig_0, w_bnode, weight = 'length'))
                    ame_w_b0 = pd.DataFrame(ame_w_b0, columns = df.columns.values.tolist().append('distance'))

                elif 'baby00' and 'ost00' in request.form.getlist('check00'):
                    for i,row in ame_b_o0.iterrows():
                        b_onode= ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    ame_b_o0.assign(distance = nx.shortest_path_length(G, Orig_0, b_onode, weight = 'length'))
                    ame_b_o0 = pd.DataFrame(ame_b_o0, columns = df.columns.values.tolist().append('distance'))

                elif 'wheel00' and 'ost00' in request.form.getlist('check00'):
                    for i,row in ame_w_o0.iterrows():
                        w_onode = ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    ame_w_o0 = ame_w_o0.assign(distance = nx.shortest_path_length(G, Orig_0, w_onode, weight = 'length'))
                    ame_w_o0 = pd.DataFrame(ame_w_o0, columns = df.columns.values.tolist().append('distance'))

                elif 'wheel00' and 'baby00' and 'ost00' in request.form.getlist('check00'):
                    for i,row in ame_w_b_o0.iterrows():
                        w_b_onode = ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    ame_w_b_o0 = ame_w_b_o0.assign(distance = nx.shortest_path_length(G, Orig_0, w_b_onode, weight = 'length'))
                    ame_w_b_o0 = pd.DataFrame(ame_w_b_o0, columns = df.columns.values.tolist().append('distance'))
                elif 'multi' in request.form.get('radio'):
                    for i,row in ame_m0.iterrows():
                        m_node = ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    ame_m0 = ame_m0.assign(distance = nx.shortest_path_length(G, Orig_0, m_node, weight = 'length'))
                    ame_m0 = pd.DataFrame(ame_m0, columns = df.columns.values.tolist().append('distance'))
                else:
                    pass
                solved=True
            except nx.exception.NetworkXNoPath:
                if 'wheel00' in request.form.getlist('check00'):
                    for i,row in ame_w0.iterrows():
                        w_node = ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    G.remove_nodes_from([w_node])
                elif 'baby00' in request.form.getlist('check00'):
                    for i,row in ame_b0.iterrows():
                        b_node= ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    G.remove_nodes_from([b_node])
                elif 'ost00' in request.form.getlist('check00'):
                    for i,row in ame_o0.iterrows():
                        o_node = ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    G.remove_nodes_from([o_node])
                elif 'wheel00' and 'baby00' in request.form.getlist('check00'):
                    for i,row in ame_w_b0.iterrows():
                        w_bnode = ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    G.remove_nodes_from([w_bnode])
                elif 'baby00' and 'ost00' in request.form.getlist('check00'):
                    for i,row in ame_b_o0.iterrows():
                        b_onode= ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    G.remove_nodes_from([b_onode])
                elif 'wheel00' and 'ost00' in request.form.getlist('check00'):
                    for i,row in ame_w_o0.iterrows():
                        w_onode = ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    G.remove_nodes_from([w_onode])
                elif 'wheel00' and 'baby00' and 'ost00' in request.form.getlist('check00'):
                    for i,row in ame_w_b_o0.iterrows():
                        w_b_onode = ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    G.remove_nodes_from([w_b_onode])
                elif 'multi' in request.form.get('radio'):
                    for i,row in ame_m0.iterrows():
                        m_node = ox.distance.get_nearest_node(G, point=(row['緯度'], row['経度']), method='haversine')
                    G.remove_nodes_from([m_node])
                else:
                    pass

        if 'wheel00' in request.form.getlist('check00'):
            ame_w0 = ame_w0.query('distance <= @numeric')
            print(ame_w0)
            folium.Marker(
                location=[o_O_lat, o_O_lng],
                icon=folium.Icon(color='green'),
                tooltip=orig0
            ).add_to(m)
            ame_w0 = pd.DataFrame(ame_w0, columns = df.columns.values.tolist().append('distance')).rename(columns=lambda s: s.replace(" ","")).copy()
            print(ame_w0.columns)
            for i, row in ame_w0.iterrows():
                folium.Marker(
                    location=[row['緯度'], row['経度']],
                    icon=folium.Icon(color='red'),
                    tooltip=row['名称'] if '名称' in ame_w0 else row['施設名'] if '施設名' in ame_w0 else row['設置位置'] if '設置位置' in ame_w0 else "",
                    popup=(row['バリアフリートイレ数'], row['車椅子'])
                ).add_to(m)
            print(1)
            m.save(os.path.join(os.getcwd(),'static/current0.html'))
            m0 = True
            minutes=request.form.get('num0')
            return render_template('traveltimezone.html', \
                                   minutes=minutes, \
                                   title="立ち寄りトイレNAVI", \
                                   message="以下のボタンをチェックされるとその機能を持ったトイレをご希望の最短経路で案内できます。", \
                                   m0=m0)
        elif 'baby00' in request.form.getlist('check00'):
            ame_b0 = ame_b0.query('distance <= @numeric')
            print(ame_b0)
            folium.Marker(
                location=[o_O_lat, o_O_lng],
                icon=folium.Icon(color='green'),
                tooltip=orig0
            ).add_to(m)
            ame_b0 = pd.DataFrame(ame_b0, columns = df.columns.values.tolist().append('distance')).rename(columns=lambda s: s.replace(" ","")).copy()
            print(ame_b0.columns)
            for i, row in ame_b0.iterrows():
                folium.Marker(
                    location=[row['緯度'], row['経度']],
                    icon=folium.Icon(color='blue'),
                    tooltip=row['名称'] if '名称' in ame_b0 else row['施設名'] if '施設名' in ame_b0 else row['設置位置'] if '設置位置' in ame_b0 else "",
                    popup=(row['ベビーベッド'], row['乳幼児用設備設置トイレ有無'])
                ).add_to(m)
            print(2)
            m.save(os.path.join(os.getcwd(),'static/current0.html'))
            m0 = True
            minutes=request.form.get('num0')
            return render_template('traveltimezone.html', \
                                   minutes=minutes, \
                                   title="立ち寄りトイレNAVI", \
                                   message="以下のボタンをチェックされるとその機能を持ったトイレをご希望の最短経路で案内できます。", \
                                   m0=m0)
        elif 'ost00' in request.form.getlist('check00'):
            ame_o0 = ame_o0.query('distance <= @numeric')
            print(ame_o0)
            folium.Marker(
                location=[o_O_lat, o_O_lng],
                icon=folium.Icon(color='green'),
                tooltip=orig0
            ).add_to(m)
            ame_o0 = pd.DataFrame(ame_o0, columns = df.columns.values.tolist().append('distance')).rename(columns=lambda s: s.replace(" ","")).copy()
            print(ame_o0.columns)
            for i, row in ame_o0.iterrows():
                folium.Marker(
                    location=[row['緯度'], row['経度']],
                    icon=folium.Icon(color='beige'),
                    tooltip=row['名称'] if '名称' in ame_o0 else row['施設名'] if '施設名' in ame_o0 else row['設置位置'] if '設置位置' in ame_o0 else "",
                    popup=row['オストメイト']
                ).add_to(m)
            print(3)
            m.save(os.path.join(os.getcwd(),'static/current0.html'))
            m0 = True
            minutes=request.form.get('num0')
            return render_template('traveltimezone.html', \
                                   minutes=minutes, \
                                   title="立ち寄りトイレNAVI", \
                                   message="以下のボタンをチェックされるとその機能を持ったトイレをご希望の最短経路で案内できます。", \
                                   m0=m0)
        elif request.form.getlist('check00') == ['wheel00','baby00']:
            ame_w_b0 = ame_w_b0.query('distance <= @numeric')
            folium.Marker(
                location=[o_O_lat, o_O_lng],
                icon=folium.Icon(color='green'),
                tooltip=orig0
            ).add_to(m)
            ame_w_b0 = pd.DataFrame(ame_w_b0, columns = df.columns.values.tolist().append('distance')).rename(columns=lambda s: s.replace(" ","")).copy()
            for i, row in ame_w_b0.iterrows():
                folium.Marker(
                    location=[row['緯度'], row['経度']],
                    icon=folium.Icon(color='red'),
                    tooltip=row['名称'] if '名称' in ame_w_b0 else row['施設名'] if '施設名' in ame_w_b0 else row['設置位置'] if '設置位置' in ame_w_b0 else "",
                    popup=(row['バリアフリートイレ数'], row['車椅子'])
                ).add_to(m)
            print(1)
            m.save(os.path.join(os.getcwd(),'static/current0.html'))
            m0 = True
            minutes=request.form.get('num0')
            return render_template('traveltimezone.html', \
                                   minutes=minutes, \
                                   title="立ち寄りトイレNAVI", \
                                   message="以下のボタンをチェックされるとその機能を持ったトイレをご希望の最短経路で案内できます。", \
                                   m0=m0)
        elif request.form.getlist('check00') == ['wheel00','ost00']:
            ame_w_o0 = ame_w_o0.query('distance <= @numeric')
            folium.Marker(
                location=[o_O_lat, o_O_lng],
                icon=folium.Icon(color='green'),
                tooltip=orig0
            ).add_to(m)
            ame_w_o0 = pd.DataFrame(ame_w_o0, columns = df.columns.values.tolist().append('distance')).rename(columns=lambda s: s.replace(" ","")).copy()
            for i, row in ame_w_o0.iterrows():
                folium.Marker(
                    location=[row['緯度'], row['経度']],
                    icon=folium.Icon(color='blue'),
                    tooltip=row['名称'] if '名称' in ame_w_o0 else row['施設名'] if '施設名' in ame_w_o0 else row['設置位置'] if '設置位置' in ame_w_o0 else "",
                    popup=(row['ベビーベッド'], row['乳幼児用設備設置トイレ有無'])
                ).add_to(m)
            print(2)
            m.save(os.path.join(os.getcwd(),'static/current0.html'))
            m0 = True
            minutes=request.form.get('num0')
            return render_template('traveltimezone.html', \
                                   minutes=minutes, \
                                   title="立ち寄りトイレNAVI", \
                                   message="以下のボタンをチェックされるとその機能を持ったトイレをご希望の最短経路で案内できます。", \
                                   m0=m0)
        elif request.form.getlist('check00') == ['baby00','ost00']:
            ame_b_o0 = ame_b_o0.query('distance <= @numeric')
            folium.Marker(
                location=[o_O_lat, o_O_lng],
                icon=folium.Icon(color='green'),
                tooltip=orig0
            ).add_to(m)
            ame_b_o0 = pd.DataFrame(ame_b_o0, columns = df.columns.values.tolist().append('distance')).rename(columns=lambda s: s.replace(" ","")).copy()
            for i, row in ame_b_o0.iterrows():
                folium.Marker(
                    location=[row['緯度'], row['経度']],
                    icon=folium.Icon(color='beige'),
                    tooltip=row['名称'] if '名称' in ame_b_o0 else row['施設名'] if '施設名' in ame_b_o0 else row['設置位置'] if '設置位置' in ame__b_o0 else "",
                    popup=row['オストメイト']
                ).add_to(m)
            print(3)
            m.save(os.path.join(os.getcwd(),'static/current0.html'))
            m0 = True
            minutes=request.form.get('num0')
            return render_template('traveltimezone.html', \
                                   minutes=minutes, \
                                   title="立ち寄りトイレNAVI", \
                                   message="以下のボタンをチェックされるとその機能を持ったトイレをご希望の最短経路で案内できます。", \
                                   m0=m0)
        elif request.form.getlist('check00') == ['baby00','wheel00','ost00']:
            ame_w_b_o0 = ame_w_b_o0.query('distance <= @numeric')
            folium.Marker(
                location=[o_O_lat, o_O_lng],
                icon=folium.Icon(color='green'),
                tooltip=orig0
            ).add_to(m)
            ame_w_b_o0 = pd.DataFrame(ame_w_b_o0, columns = df.columns.values.tolist().append('distance')).rename(columns=lambda s: s.replace(" ","")).copy()
            for i, row in ame_w_b_o0.iterrows():
                folium.Marker(
                    location=[row['緯度'], row['経度']],
                    icon=folium.Icon(color='blue'),
                    tooltip=row['名称'] if '名称' in ame_w_b_o0 else row['施設名'] if '施設名' in ame_w_b_o0 else row['設置位置'] if '設置位置' in ame_w_b_o0 else "",
                    popup=(row['ベビーベッド'], row['乳幼児用設備設置トイレ有無'])
                ).add_to(m)
            print(2)
            m.save(os.path.join(os.getcwd(),'static/current0.html'))
            m0 = True
            minutes=request.form.get('num0')
            return render_template('traveltimezone.html', \
                                   minutes=minutes, \
                                   title="立ち寄りトイレNAVI", \
                                   message="以下のボタンをチェックされるとその機能を持ったトイレをご希望の最短経路で案内できます。", \
                                   m0=m0)
        elif request.form.get('radio') ==['multi']:
            ame_m0 = ame_m0.query('distance <= @numeric')
            folium.Marker(
                location=[o_O_lat, o_O_lng],
                icon=folium.Icon(color='green'),
                tooltip=orig0
            ).add_to(m)
            ame_m0 = pd.DataFrame(ame_m0, columns = df.columns.values.tolist().append('distance')).rename(columns=lambda s: s.replace(" ","")).copy()
            for i, row in ame_m0.iterrows():
                folium.Marker(
                    location=[row['緯度'], row['経度']],
                    icon=folium.Icon(color='beige'),
                    tooltip=row['名称'] if '名称' in ame_m0 else row['施設名'] if '施設名' in ame_m0 else row['設置位置'] if '設置位置' in ame_m0 else "",
                    popup=row['オストメイト']
                ).add_to(m)
            print(3)
            m.save(os.path.join(os.getcwd(),'static/current0.html'))
            m0 = True
            minutes=request.form.get('num0')
            return render_template('traveltimezone.html', \
                                   minutes=minutes, \
                                   title="立ち寄りトイレNAVI", \
                                   message="以下のボタンをチェックされるとその機能を持ったトイレをご希望の最短経路で案内できます。", \
                                   m0=m0)
        else:
            print(4)
            m.save(os.path.join(os.getcwd(),'static/current0.html'))
            m0 = True
            minutes=request.form.get('num0')
            return render_template('traveltimezone.html', \
                                   minutes=minutes, \
                                   title="立ち寄りトイレNAVI", \
                                   message="以下のボタンをチェックされるとその機能を持ったトイレをご希望の最短経路で案内できます。", \
                                   m0=m0)
_______________________________________________________
    if bool(city) == True and not any(s.startswith(city_pref) for s in place_list):
        print(1.1)
        G = ox.graph.graph_from_place('{h1}, {h2}, JAPAN'.format(h1=city, h2=pref), network_type='drive',simplify=False, retain_all=True, truncate_by_edge=True, clean_periphery=True)
        filepath = os.path.join(str(os.getcwd()),'data/graph/{}'.format(city_pref))
        ox.io.save_graphml(G,filepath=filepath, gephi=False, encoding="utf-8")
        G = ox.io.load_graphml(filepath, node_dtypes=None, edge_dtypes=None)
        print(0.1)
        print(0)
        gdf_nodes, gdf_edges = ox.graph_to_gdfs(G)
        Orig_01 = ox.distance.nearest_nodes(G, o['lat'], o['lng'])
        Dest_01 = ox.distance.nearest_nodes(G, d['lat'], d['lng'])
        numeric = nx.shortest_path_length(G, Orig_01, Dest_01, weight='length') / 2
        for i, row in ame_R.iterrows():
            ame_R['distance'] = nx.shortest_path_length(G, Orig_01,
                                                         ox.distance.get_nearest_nodes(G, row['緯度'], row['経度']),
                                                         weight='length')+nx.shortest_path_length(G, Dest_01,
                                                         ox.distance.get_nearest_nodes(G, row['緯度'], row['経度']),
                                                         weight='length')
        ame_R = ame_R.query('distance <= @numeric')
        tooltip = '名称' if '名称' in ame_R else '施設名' if '施設名' in ame_R else '設置位置' if '設置位置' in ame_R else ""
        m = folium.Map(
            location=[(x1 + x2) / 2, (y1 + y2) / 2],
            zoom_start=14)
        for i, row in ame_R.iterrows():
            folium.Marker(
                location = [row['緯度'], row['経度']],
                icon = folium.Icon(color='red'),
                tooltip=row['名称'] if '名称' in ame_R else row['施設名'] if '施設名' in ame_R else row['設置位置'] if '設置位置' in ame_R else "",
                popup = (row['バリアフリートイレ数'], row['車椅子'])
            ).add_to(m)
        folium.Marker(
            location=[o['lat'], o['lng']],
            tooltip=(o['施設名']),
            icon=folium.Icon(color='orange')
        ).add_to(m)
        folium.Marker(
            location=[d['lat'], d['lng']],
            tooltip=(d['施設名']),
            icon=folium.Icon(color='beige')
        ).add_to(m)
        m.save(os.path.join(os.getcwd(),'static/current1.html'))
        m1 = True
        orig = request.form['orig1'] if bool(request.form['orig1']) == True else False
        dest = request.form['dest1'] if bool(request.form['dest1']) == True else False
        wheel = "車椅子対応" if wheel == True else False
        baby = "ベビーベッド" if baby == True else False
        ost = "オストメイト" if ost == True else False
        return render_template('livingarea.html', \
                               m1=m1, \
                               orig=orig, \
                               dest=dest, \
                               wheel=wheel, \
                               baby=baby, \
                               ost=ost)
______________________________________________
    if not city_pref in place_list:
        print(1.1)
        G = ox.graph.graph_from_place('{h1}, {h2}'.format(h1=city, h2=pref), network_type='drive',simplify=False, retain_all=True, truncate_by_edge=True, clean_periphery=True)
        filepath = os.path.join(str(os.getcwd()),'data/graph/{h1}'.format(h1=city_pref))
        print(filepath)
        ox.io.save_graphml(G,filepath=str(filepath), gephi=False, encoding="utf-8")
        G = ox.io.load_graphml(str(filepath), node_dtypes=None, edge_dtypes=None, graph_dtypes=None)
        print(0.1)
        G = ox.distance.add_edge_lengths(G,precision=3)
        Orig = ox.distance.nearest_nodes(G, o['lat'], o['lng'])
        Dest = ox.distance.nearest_nodes(G, d['lat'], d['lng'])
        def closest_od(data,O_Ame,Ame_D):
            for i,row in ameR.iterrows():
                Ame = ox.distance.nearest_nodes(G, float(row['緯度']), float(row['経度']))
                O_Ame=ox.distance.shortest_path(G, Orig, Ame, weight='length')
                Ame_D=ox.distance.shortest_path(G, Dest, Ame, weight='length')
            return min(data, key=lambda p: abs(O_Ame+Ame_D),
                       default="")

        def closest_o(data,O_Ame):
            for i,row in ameR.iterrows():
                Ame = ox.distance.nearest_nodes(G, float(row['緯度']), float(row['経度']))
                O_Ame=ox.distance.shortest_path(G, Orig, Ame, weight='length')
                Ame_D=ox.distance.shortest_path(G, Dest, Ame, weight='length')
            return min(data, key=lambda p: O_Ame, default="")

        def closest_d(data,Ame_D):
            for i,row in ameR.iterrows():
                Ame = ox.distance.nearest_nodes(G, float(row['緯度']), float(row['経度']))
                O_Ame=ox.distance.shortest_path(G, Orig, Ame, weight='length')
                Ame_D=ox.distance.shortest_path(G, Dest, Ame, weight='length')
            return min(data, key=lambda p: Ame_D, default="")

        ame_close = {'施設名': closest_o(ameR,O_Ame)['名称'] if len(closest_o(ameR,O_Ame)) > 0 else "",
                     'lat': float(closest_o(ameR,O_Ame)['緯度']) if len(closest_o(ameR,O_Ame)) > 0 else "",
                     'lng': float(closest_o(ameR,O_Ame)['経度']) if len(
                         closest_o(ameR0,O_Ame)) > 0 else ""} if short == "orig_short" else {
            '施設名': closest_d(ameR0,Ame_D)['名称'] if len(closest_d(ameR,Ame_D)) > 0 else "",
            'lat': float(closest_d(ameR,Ame_D)['緯度']) if len(closest_d(ameR,Ame_D)) > 0 else "",
            'lng': float(closest_d(ameR,Ame_D)['経度']) if len(closest_d(ameR,Ame_D)) > 0 else ""} if short == "dest_short" else {
            '施設名': closest_od(ameR,O_Ame,Ame_D)['名称'] if len(closest_od(ameR,O_Ame,Ame_D)) > 0 else "",
            'lat': float(closest_od(ameR,O_Ame,Ame_D)['緯度']) if len(closest_od(ameR,O_Ame,Ame_D)) > 0 else "",
            'lng': float(closest_od(ameR,O_Ame,Ame_D)['経度']) if len(
                closest_od(ameR0,o,d)) > 0 else ""} if short == "all_short" else False
        print("一番近いトイレは")
        print(ame_close)
        if bool(ame_close['施設名']) != False:
            print(1)
            Ame = ox.distance.nearest_nodes(G, float(ame_close['lat']), float(ame_close['lng']))
            api = overpy.Overpass()
            lat = float(ame_close['lat'])
            lng = float(ame_close['lng'])
            type = 'service'
            result = api.query("""
                        way(%f, %f, %f, %f)[%s];
                        (._;>;);
                        out body;
                        """ % (lat - 0.005, lng - 0.005, lat + 0.005, lng + 0.005, type))

            path_node = []
            path_way = []
            for way in result.ways:
                " service: %s" % way.tags.get("parking_aisle", "n/a")
                dict = {'id': way.id}
                path_way.append(dict)
                for node in way.nodes:
                    list = (float(node.lat), float(node.lon))
                    path_node.append(list)
            route0_1 = ox.distance.shortest_path(G, Orig, Ame, weight='length')
            lng0_1 = []
            lat0_1 = []
            for i in route0_1:
                point = G.nodes[i]
                lng0_1.append(point['x'])
                lat0_1.append(point['y'])
            myl0_1 = []
            tp0_1 = zip(lat0_1, lng0_1)
            for val0_1 in tp0_1:
                myl0_1.append(val0_1)
            ########
            route0_2 = nx.shortest_path(G, Ame, Dest, weight='length')
            lng0_2 = []
            lat0_2 = []
            for i in route0_2:
                point = G.nodes[i]
                lng0_2.append(point['x'])
                lat0_2.append(point['y'])
                print(lat0_2)
            tp0_2=[]
            for lat0_2, lng0_2 in zip(lat0_2, lng0_2):
                tp0_2.append([lat0_2, lng0_2])
            print(tp0_2)
            myl0_2 = []
            for val0_2 in tp0_2:
                myl0_2.append(val0_2)
            print(myl0_2)
            myl0_3 = myl0_2 + myl0_1
            path_ame = [x for x in path_node if x in myl0_3]
            if bool(path_ame) == True:
                print(2)
                Path_ame = ox.distance.nearest_nodes(G, path_ame[0][0], path_ame[0][1])
                route1_2 = ox.distance.shortest_path(G, Orig, Path_ame, weight='length')
                lng1_2 = []
                lat1_2 = []
                tp1_2 = []
                for i in route1_2:
                    point = G.nodes[i]
                    lng1_2.append(point['x'])
                    lat1_2.append(point['y'])
                mylist1_2=[]
                for i in range(len(route1_2)-1):
                    mylist1_2.append([lat1_2[i], lng1_2[i]])
                ########
                route2_2 = nx.shortest_path(G, Path_ame, Dest, weight='length')
                lng2_2 = []
                lat2_2 = []
                for i in route2_2:
                    point = G.nodes[i]
                    lng2_2.append(point['x'])
                    lat2_2.append(point['y'])
                mylist2_2=[]
                for i in range(len(route2_2)-1):
                    mylist2_2.append([lat2_2[i], lng2_2[i]])
                    ################
                m = folium.Map(location=[ame_close['lat'], ame_close['lng']], zoom_start=14)
                folium.Marker(location=[o['lat'], o['lng']], tooltip=(o['施設名']), icon=folium.Icon(color='orange')
                              ).add_to(m)
                folium.Marker(location=[d['lat'], d['lng']], tooltip=(d['施設名']), icon=folium.Icon(color='beige')
                              ).add_to(m)
                LocateControl(MacroElement).add_to(m)
                orig = request.form['orig'] if bool(request.form['orig']) == True else False
                dest = request.form['dest'] if bool(request.form['dest']) == True else False
                wheel = "車椅子対応" if wheel == True else False
                baby = "ベビーベッド" if baby == True else False
                ost = "オストメイト" if ost == True else False
                all_short = "目的地までの最短経路にあるトイレ" if short == "all_short" else False
                orig_short = "出発地最寄りのトイレ" if short == "orig_short" else False
                dest_short = "目的地最寄りのトイレ" if short == "dest_short" else False
                orig_time = math.ceil(nx.shortest_path_length(G, Orig, Path_ame, weight='length') * 60 / 25000)
                dest_time = math.ceil(nx.shortest_path_length(G, Path_ame, Dest, weight='length') * 60 / 25000)
                iframe = str(ame_close['施設名']) + "("+str(ame_close['バリアフリートイレ数'])+str(ame_close['車椅子']) + ")" if wheel == True else str(ame_close['施設名']) +  "("+str(ame_close['ベビーベッド'])+str(ame_close['乳幼児用設備設置トイレ有無'])+")" if baby == True else str(ame_close['施設名']) + str(ame_close['オストメイト']) + ")" if ost == True else ""
                folium.Marker(location=[ame_close['lat'], ame_close['lng']],
                              tooltip=(iframe),
                              icon=folium.Icon(color='red', icon="arrow-down"),
                              ).add_to(m)
                line = folium.PolyLine(locations=mylist1_2, color='orange')
                m.add_child(line)
                line1 = folium.PolyLine(locations=mylist2_2, color='red')
                m.add_child(line1)
                m.save(os.path.join(os.getcwd(),'static/current2.html'))
                m2 = True
                ame = True if (ame__p.empty or ame__h.empty or ame__a.empty or ame__t.empty or ame__hp.empty) == True else False
                ame_close = ame_close['施設名']
                return render_template('via_toilet.html', \
                                       m2=m2, \
                                       ame = ame,\
                                       orig=orig, \
                                       dest=dest, \
                                       wheel=wheel, \
                                       baby=baby, \
                                       ost=ost, \
                                       amenity=amenity,\
                                       all_short=all_short, \
                                       orig_short=orig_short, \
                                       dest_short=dest_short, \
                                       orig_time=orig_time, \
                                       dest_time=dest_time, \
                                       ame_close=ame_close)

            else:
                print(3)
                m = folium.Map(
                    location=[(x1 + x2) / 2, (y1 + y2) / 2],
                    zoom_start=14)
                folium.Marker(
                    location=[o['lat'], o['lng']],
                    tooltip=(o['施設名']),
                    icon=folium.Icon(color='orange')
                ).add_to(m)
                folium.Marker(
                    location=[d['lat'], d['lng']],
                    tooltip=(d['施設名']),
                    icon=folium.Icon(color='beige')
                ).add_to(m)
                LocateControl(MacroElement).add_to(m)
                orig = request.form['orig'] if bool(request.form['orig']) == True else False
                dest = request.form['dest'] if bool(request.form['dest']) == True else False
                wheel = "車椅子対応" if wheel == True else False
                baby = "ベビーベッド" if baby == True else False
                ost = "オストメイト" if ost == True else False
                all_short = "目的地までの最短経路にあるトイレ" if short == "all_short" else False
                orig_short = "出発地最寄りのトイレ" if short == "orig_short" else False
                dest_short = "目的地最寄りのトイレ" if short == "dest_short" else False
                orig_time = math.ceil(nx.shortest_path_length(G, Orig, Ame, weight='length') * 60 / 25000)
                dest_time = math.ceil(nx.shortest_path_length(G, Ame, Dest, weight='length') * 60 / 25000)
                iframe = str(ame_close['施設名']) + "("+str(ame_close['バリアフリートイレ数'])+str(ame_close['車椅子']) + ")" if wheel == True else str(ame_close['施設名']) +  "("+str(ame_close['ベビーベッド'])+str(ame_close['乳幼児用設備設置トイレ有無'])+")" if baby == True else str(ame_close['施設名']) + str(ame_close['オストメイト']) + ")" if ost == True else ""
                line = folium.PolyLine(locations=myl0_1, color='orange')
                m.add_child(line)
                line1 = folium.PolyLine(locations=myl0_2, color='red')
                m.add_child(line1)
                folium.Marker(location=[ame_close['lat'], ame_close['lng']],
                              tooltip=(iframe),
                              icon=folium.Icon(color='red', icon="arrow-down"),
                              ).add_to(m)
                m.save(os.path.join(os.getcwd(),'static/current2.html'))
                m2 = True
                ame = True if (ame__p.empty or ame__h.empty or ame__a.empty or ame__t.empty or ame__hp.empty) == True else False
                ame_close = ame_close['施設名']
                return render_template('via_toilet.html', \
                                       m2=m2, \
                                       ame = ame,\
                                       orig=orig, \
                                       dest=dest, \
                                       wheel=wheel, \
                                       baby=baby, \
                                       ost=ost, \
                                       amenity=amenity, \
                                       all_short=all_short, \
                                       orig_short=orig_short, \
                                       dest_short=dest_short, \
                                       orig_time=orig_time, \
                                       dest_time=dest_time, \
                                       ame_close=ame_close)
        else:
            print(4)
            ame_close = []
            ame_close.clear()
            route = nx.shortest_path(G, Orig, Dest, weight='length')
            lng = []
            lat = []
            for i in route:
                point = G.nodes[i]
                lng.append(point['x'])
                lat.append(point['y'])
            mylist=[]
            for i in range(len(route)-1):
                mylist.append([lat[i], lng[i]])
            m = folium.Map(
                location=[(x1 + x2) / 2, (y1 + y2) / 2],
                zoom_start=14)
            folium.Marker(
                location=[o['lat'], o['lng']],
                tooltip=(o['施設名']),
                icon=folium.Icon(color='orange')
            ).add_to(m)
            folium.Marker(
                location=[d['lat'], d['lng']],
                tooltip=(d['施設名']),
                icon=folium.Icon(color='beige')
            ).add_to(m)
            LocateControl(MacroElement).add_to(m)
            line = folium.PolyLine(locations=mylist, color='red')
            m.add_child(line)
            m.save(os.path.join(os.getcwd(),'static/current2.html'))
            m2 = True
            orig = request.form['orig'] if bool(request.form['orig']) == True else False
            dest = request.form['dest'] if bool(request.form['dest']) == True else False
            wheel = "車椅子対応" if wheel == True else False
            baby = "ベビーベッド" if baby == True else False
            ost = "オストメイト" if ost == True else False
            all_short = "目的地までの最短経路にあるトイレ" if short == "all_short" else False
            orig_short = "出発地最寄りのトイレ" if short == "orig_short" else False
            dest_short = "目的地最寄りのトイレ" if short == "dest_short" else False
            orig_time = math.ceil(nx.shortest_path_length(G, Orig, Dest, weight='length') * 60 / 25000)
            ame = True if (ame__p.empty or ame__h.empty or ame__a.empty or ame__t.empty or ame__hp.empty) == True else False
            ame_close = ame_close['施設名']
            return render_template('via_toilet.html', \
                                   m2=m2, \
                                   ame=ame, \
                                   orig=orig, \
                                   dest=dest, \
                                   wheel=wheel, \
                                   baby=baby, \
                                   ost=ost, \
                                   amenity=amenity, \
                                   all_short=all_short, \
                                   orig_short=orig_short, \
                                   dest_short=dest_short, \
                                   orig_time=orig_time, \
                                   dest_time=dest_time, \
                                   ame_close=ame_close)

projects/agile-team-296603/zones/asia-northeast1-a/instances/managedssl-mig-skhf
df.query('(20.25<緯度<45.33)&(122.55<経度<153.59)|(緯度!="")&(経度!="") | (バリアフリートイレ数 != None) | (車椅子 != None) | (ベビーベッド != None) | (乳幼児用設備設置トイレ有無 != None) | (オストメイト != None)')                       

            <div class="menu">
              <input type="button" value="現在地を表示" onclick="setCurLocation();">
              <select name="citylist" id="cityselect">
                <option value="北海道網走市">北海道網走市</option>
                <option value="北海道登別市">北海道登別市</option>
                <option value="北海道函館市">北海道函館市</option>
                <option value="青森県青森市">青森県青森市</option>
                <option value="岩手県盛岡市">岩手県盛岡市</option>
                <option value="宮城県仙台市">宮城県仙台市</option>
                <option value="山形県山形市">山形県山形市</option>
                <option value="福島県郡山市">福島県郡山市</option>
                <option value="埼玉県川口市">埼玉県川口市</option>
                <option value="東京都江東区">東京都江東区</option>
                <option value="東京都板橋区">東京都板橋区</option>
                <option value="東京都中野区">東京都中野区</option>
                <option value="東京都渋谷区">東京都渋谷区</option>
                <option value="東京都青梅市">東京都青梅市</option>
                <option value="東京都多摩市">東京都多摩市</option>
                <option value="東京都八王子市">東京都八王子市</option>
                <option value="神奈川県平塚市">神奈川県平塚市</option>
                <option value="静岡県小山町">静岡県小山町</option>
                <option value="静岡県伊東市">静岡県伊東市</option>
                <option value="長野県茅野市">長野県茅野市</option>
                <option value="富山県魚津市">富山県魚津市</option>
                <option value="石川県野々市市">石川県野々市市</option>
                <option value="石川県金沢市">石川県金沢市</option>
                <option value="石川県珠洲市">石川県珠洲市</option>
                <option value="福井県福井市">福井県福井市</option>
                <option value="福井県鯖江市">福井県鯖江市</option>
                <option value="福井県敦賀市">福井県敦賀市</option>
                <option value="福井県小浜市">福井県小浜市</option>
                <option value="福井県大野市">福井県大野市</option>
                <option value="福井県勝山市">福井県勝山市</option>
                <option value="福井県あわら市">福井県あわら市</option>
                <option value="福井県越前市">福井県越前市</option>
                <option value="福井県坂井市">福井県坂井市</option>
                <option value="福井県永平寺町">福井県永平寺町</option>
                <option value="福井県池田町">福井県池田町</option>
                <option value="福井県南越前町">福井県南越前町</option>
                <option value="福井県越前町">福井県越前町</option>
                <option value="福井県美浜町">福井県美浜町</option>
                <option value="福井県おおい町">福井県おおい町</option>
                <option value="福井県若狭町">福井県若狭町</option>
                <option value="愛知県刈谷市">愛知県刈谷市</option>
                <option value="愛知県日進市">愛知県日進市</option>
                <option value="愛知県瀬戸市">愛知県瀬戸市</option
                <option value="愛知県豊川市">愛知県豊川市</option>
                <option value="愛知県尾張旭市">愛知県尾張旭市</option>>
                <option value="三重県鈴鹿市">三重県鈴鹿市</option>
                <option value="三重県四日市市">三重県四日市市</option>
                <option value="大阪府大阪市">大阪府大阪市</option>
                <option value="大阪府枚方市">大阪府枚方市</option>
                <option value="大阪府貝塚市">大阪府貝塚市</option>
                <option value="大阪府堺市">大阪府堺市</option>
                <option value="京都府京都市">京都府京都市</option>
                <option value="和歌山県和歌山市">和歌山県和歌山市</option>
                <option value="兵庫県神戸市">兵庫県神戸市</option>
                <option value="兵庫県川西市">兵庫県川西市</option>
                <option value="兵庫県明石市">兵庫県明石市</option>
                <option value="兵庫県たつの市">兵庫県たつの市</option>
                <option value="兵庫県丹波市">兵庫県丹波市</option>
                <option value="岡山県岡山市">岡山県岡山市</option>
                <option value="山口県柳井市">山口県柳井市</option>
                <option value="徳島県美波町">徳島県美波町</option>
                <option value="徳島県池田町">徳島県池田町</option>
                <option value="愛媛県東温市">愛媛県東温市</option>
                <option value="福岡県飯塚市">福岡県飯塚市</option>
              </select>
            </div>
        let citylocation=[{'市町村':'北海道網走市','緯度':44.020606,'経度':144.273484},
            {'市町村':'北海道登別市','緯度':42.412791,'経度':141.106606},
            {'市町村':'北海道函館市','緯度':41.768696,'経度':140.72906},
            {'市町村':'青森県青森市','緯度':40.82222,'経度':140.747352},
            {'市町村':'岩手県盛岡市','緯度':39.701956,'経度':141.15433},
            {'市町村':'宮城県仙台市','緯度':38.268201,'経度':140.869426},
            {'市町村':'山形県山形市','緯度':38.255415,'経度':140.339618},
            {'市町村':'福島県郡山市','緯度':37.400478,'経度':140.359682},
            {'市町村':'埼玉県川口市','緯度':35.807736,'経度':139.724187},
            {'市町村':'東京都板橋区','緯度':35.751231,'経度':139.709279},
            {'市町村':'東京都中野区','緯度':35.707533,'経度':139.663759},
	    {'市町村':'東京都渋谷区','緯度':35.663684,'経度':139.697741},
            {'市町村':'東京都江東区','緯度':35.672706,'経度':139.817144},
            {'市町村':'東京都多摩市','緯度':35.637006,'経度':139.44631},
            {'市町村':'東京都青梅市','緯度':35.788025,'経度':139.275798},
            {'市町村':'東京都八王子市','緯度':35.666498,'経度':139.316013},
            {'市町村':'神奈川県平塚市','緯度':35.33493,'経度':139.349478:},
            {'市町村':'静岡県小山町','緯度':35.36011,'経度':138.987329},
	    {'市町村':'静岡県伊東市','緯度':34.965665,'経度': 139.102306},
            {'市町村':'長野県茅野市','緯度':35.99499,'経度':138.157659},
            {'市町村':'富山県魚津市','緯度':36.827376,'経度':137.409075},
            {'市町村':'石川県野々市市','緯度':36.51941,'経度':136.609731},
            {'市町村':'石川県金沢市','緯度':36.561031,'経度':136.656647},
            {'市町村':'石川県珠洲市','緯度':37.436388,'経度':137.260524},
            {'市町村':'福井県福井市','緯度':36.064139,'経度':136.219623},
            {'市町村':'福井県鯖江市','緯度':35.956504,'経度':136.184233},
            {'市町村':'福井県敦賀市','緯度':35.645947,'経度':136.055697},
            {'市町村':'福井県小浜市','緯度':35.495628,'経度':135.746721},
            {'市町村':'福井県大野市','緯度':35.979772,'経度':136.487534},
            {'市町村':'福井県勝山市','緯度':36.060926,'経度':136.500639},
            {'市町村':'福井県あわら市','緯度':36.211396,'経度':136.229037},
            {'市町村':'福井県越前市','緯度':35.903496,'経度':136.168717},
            {'市町村':'福井県坂井市','緯度':36.16673,'経度':136.231492},
            {'市町村':'福井県永平寺町','緯度':36.092334,'経度':136.299079},
            {'市町村':'福井県池田町','緯度':35.891115,'経度':136.343922},
            {'市町村':'福井県南越前町','緯度':35.834989,'経度':136.194499},
            {'市町村':'福井県越前町','緯度':35.974015,'経度':136.12989},
            {'市町村':'福井県美浜町','緯度':35.600621,'経度':135.940505},
            {'市町村':'福井県おおい町','緯度':35.482128,'経度':135.617355},
            {'市町村':'福井県若狭町','緯度':35.549189,'経度':135.908541},
            {'市町村':'愛知県刈谷市','緯度':34.989088,'経度':137.002301},
            {'市町村':'愛知県日進市','緯度':35.132036,'経度':137.039499},
            {'市町村':'愛知県瀬戸市','緯度':35.223933,'経度':137.08413},
 	    {'市町村':'愛知県豊川市','緯度':34.826693,'経度':137.375879},
            {'市町村':'愛知県尾張旭市','緯度':35.216475,'経度':137.035233},
            {'市町村':'三重県鈴鹿市','緯度':34.881658,'経度':136.584231},
            {'市町村':'三重県四日市市','緯度':34.965106,'経度':136.624412},
            {'市町村':'大阪府大阪市','緯度':34.693737,'経度':135.502167:},
            {'市町村':'大阪府枚方市','緯度':34.814739,'経度':135.651136},
            {'市町村':'大阪府貝塚市','緯度':34.438521,'経度':135.358554},
            {'市町村':'大阪府堺市','緯度':34.573326,'経度':135.483118},
            {'市町村':'京都府京都市','緯度': 35.011564,'経度':135.768149},
            {'市町村':'和歌山県和歌山市','緯度':34.230368,'経度':135.170741},
            {'市町村':'兵庫県神戸市','緯度':34.689486,'経度':135.195739},
            {'市町村':'兵庫県川西市','緯度':34.830199,'経度':135.417396},
            {'市町村':'兵庫県明石市','緯度':34.643208,'経度':134.997586},
            {'市町村':'兵庫県たつの市','緯度':34.831408,'経度':134.549424},
            {'市町村':'兵庫県丹波市','緯度':35.177132,'経度':135.035842},
            {'市町村':'岡山県岡山市','緯度':34.655531,'経度':133.919795},
            {'市町村':'山口県柳井市','緯度':33.963886,'経度':132.101638},
            {'市町村':'徳島県美波町','緯度':33.734555,'経度':134.535542},
            {'市町村':'徳島県池田町','緯度':34.029226,'経度':133.806987},
            {'市町村':'愛媛県東温市','緯度':33.79105,'経度':132.872284},
            {'市町村':'福岡県飯塚市','緯度':33.646563,'経度':130.69118}];
        function setCityLocation(){
          for (let j=0; j<citylocation.length; j++){
          console.log(citylocation[j]['市町村'])
          console.log(cityselect.value)
          if (cityselect.value == citylocation[j]['市町村']){
            var citylat  = citylocation[j]['緯度'];
            var citylng = citylocation[j]['経度'];
            map_5e416c5cccb8450bbe096d7b54a81dd0.setView([citylat, citylng], 15);
            L.marker([citylat,citylng]).addTo(map_5e416c5cccb8450bbe096d7b54a81dd0).bindPopup(citylocation[j]['市町村']).openPopup();
          };
        };
      };
      let citylist = document.getElementById('menu');
      let cityselect = document.getElementById('cityselect');
      cityselect.addEventListener('change', setCityLocation);
      function setCurLocation(){
      if (navigator.geolocation == false){
        alert('現在地を取得できませんでした。');
        return;
      }
      function success(e) {
        var lat  = e.coords.latitude;
        var lng = e.coords.longitude;
        map_5e416c5cccb8450bbe096d7b54a81dd0.setView([lat, lng], 15);
        L.marker([lat,lng]).addTo(map_5e416c5cccb8450bbe096d7b54a81dd0).bindPopup('現在地').openPopup();
      };

      function error() {
        alert('現在地を取得できませんでした。');
      };

      navigator.geolocation.getCurrentPosition(success, error);
      }
      map_5e416c5cccb8450bbe096d7b54a81dd0.on(('moveend' ||'zoomend'),function (layer){
      let markerList = [];
      map_5e416c5cccb8450bbe096d7b54a81dd0.eachLayer(function(layer) {
        if ((layer instanceof L.Marker) && (map_5e416c5cccb8450bbe096d7b54a81dd0.getBounds().contains(layer.getLatLng()))){
          markerList.push(layer);
          var table = window.parent.document.getElementById("table");
          table.innerHTML="";
          var tbody = window.parent.document.createElement("tbody");
          var row_num = table.rows.length;
          var tr0 = window.parent.document.createElement("tr");
          var thead = window.parent.document.createElement("thead");

          var ame_th_name = window.parent.document.createElement("th");
          ame_th_name.innerHTML="施設名称";
          var ame_th_city = window.parent.document.createElement("th");
          ame_th_city.innerHTML="市区町村";
          var ame_th_wheel = window.parent.document.createElement("th");
          ame_th_wheel.innerHTML="車椅子";
          var ame_th_baby = window.parent.document.createElement("th");
          ame_th_baby.innerHTML="乳幼児用";
          var ame_th_ost = window.parent.document.createElement("th");
          ame_th_ost.innerHTML="オストメイト";
          var ame_th_multi = window.parent.document.createElement("th");
          ame_th_multi.innerHTML="多機能トイレ";

          table.appendChild(thead);
          table.appendChild(tbody);
          tr0.appendChild(ame_th_name);
          tr0.appendChild(ame_th_city);
          tr0.appendChild(ame_th_wheel);
          tr0.appendChild(ame_th_baby);
          tr0.appendChild(ame_th_ost);
          tr0.appendChild(ame_th_multi);
          thead.appendChild(tr0);
          for (let j=0; j<markerList.length; j++){
            var tr = document.createElement("tr");
            var name_td = window.parent.document.createElement("td");
            name_td.id = layer._leaflet_id;
            var name_button = window.parent.document.createElement("button");
            var name_inner =  layer._leaflet_id.toString().length<=4 ? window.parent.document.createTextNode(markerList[j].getTooltip().getContent().replace("<div>","").replace("</div>","").split("<br>")[0]) : "-";
            name_button.innerHTML=name_inner.textContent;
            name_td.appendChild(name_button);

            var ame_td_city = window.parent.document.createElement("td");
            layer._leaflet_id.toString().length<=4 ? ame_td_city.innerHTML=markerList[j].getPopup().getContent().innerHTML.replace("<div>","").replace("</div>","").split("<br>")[0] : "-";
            var ame_td_wheel = window.parent.document.createElement("td");
            layer._leaflet_id.toString().length<=4 ? ame_td_wheel.innerHTML=markerList[j].getPopup().getContent().innerHTML.replace("<div>","").replace("</div>","").replace("車椅子:","").split("<br>")[1] : "-";
            var ame_td_baby = window.parent.document.createElement("td");
            layer._leaflet_id.toString().length<=4 ? ame_td_baby.innerHTML=markerList[j].getPopup().getContent().innerHTML.replace("<div>","").replace("</div>","").replace("乳幼児用:","").replace("ベビーベッド:","").split("<br>")[2] : "-";
            var ame_td_ost = window.parent.document.createElement("td");
            layer._leaflet_id.toString().length<=4 ? ame_td_ost.innerHTML=markerList[j].getPopup().getContent().innerHTML.replace("<div>","").replace("</div>","").replace("オストメイト:","").split("<br>")[3] : "-";
            var ame_td_multi = window.parent.document.createElement("td");
            layer._leaflet_id.toString().length<=4 ? ame_td_multi.innerHTML=markerList[j].getPopup().getContent().innerHTML.replace("<div>","").replace("</div>","").replace("多機能:","").split("<br>")[4] : "-";

            tr.appendChild(name_td);
            tr.appendChild(ame_td_city);
            tr.appendChild(ame_td_wheel);
            tr.appendChild(ame_td_baby);
            tr.appendChild(ame_td_ost);
            tr.appendChild(ame_td_multi);

            tbody.appendChild(tr);

            name_button.addEventListener("click", function () {
              console.log(name_button.innerHTML);
              console.log(markerList[j].getTooltip().getContent().replace("<div>","").replace("</div>","").split("<br>")[1]);
              var lat = markerList[j].getTooltip().getContent().replace("<div>","").replace("</div>","").split("<br>")[1];
              var lng = markerList[j].getTooltip().getContent().replace("<div>","").replace("</div>","").split("<br>")[2];
              console.log(lat);
              map_5e416c5cccb8450bbe096d7b54a81dd0.flyTo([lat, lng],18);
            });
          };
        };
      });
    });                                                                                                                                                                                          