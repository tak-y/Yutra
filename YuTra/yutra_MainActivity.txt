package com.websarva.wings.android.yutra;


import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.content.Intent;
import android.icu.text.SimpleDateFormat;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;

import androidx.appcompat.app.AppCompatActivity;

import org.python.core.PyInteger;
import org.python.core.PyString;
import org.python.util.PythonInterpreter;

import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;

public class MainActivity extends AppCompatActivity {
    EditText OrigDateText = findViewById(R.id.edit_OrigDate);
    EditText OrigTimeText = findViewById(R.id.edit_OrigTime);
    EditText DestDateText = findViewById(R.id.edit_DestDate);
    EditText DestTimeText = findViewById(R.id.edit_DestTime);
    EditText origf = findViewById(R.id.origf);
    EditText origs = findViewById(R.id.origs);
    EditText prepare = findViewById(R.id.preparetime);
    EditText destf = findViewById(R.id.destf);
    EditText dests = findViewById(R.id.dests);
    EditText allow = findViewById(R.id.allow);
    Button confirm = findViewById(R.id.confirm);

    String origf_s = origf.getText().toString();
    String origs_s = origs.getText().toString();
    String prepare_s = prepare.getText().toString();
    String destf_s = destf.getText().toString();
    String dests_s = dests.getText().toString();
    Date date = new Date();
    int year = 0;
    int month = 0;
    int day = 0;
    int orighour = 0;
    int origminutes = 0;
    int desthour = 0;
    int destminutes = 0;
    String o_d_str;

    @SuppressLint("WrongViewCast")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

    }

    public void origdatebutton(View view) {

        Calendar calendar = Calendar.getInstance();

        DatePickerDialog datePickerDialog = new DatePickerDialog(
                this, new DatePickerDialog.OnDateSetListener() {
            @Override
            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                OrigDateText.setText(String.format(Locale.JAPAN, "%02d : %02d / %02d", year, month + 1, dayOfMonth));
            }
        },
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH)
        );
        datePickerDialog.show();
    }
    public void origtimebutton(View view) {

        Calendar calendar = Calendar.getInstance();

        DatePickerDialog datePickerDialog = new DatePickerDialog(
                this, new DatePickerDialog.OnDateSetListener() {
            @Override
            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                OrigTimeText.setText(String.format(Locale.JAPAN, "%02d : %02d", orighour, origminutes));
            }
        },
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH)
        );
        datePickerDialog.show();
    }
    public void destdatebutton(View view) {

        Calendar calendar = Calendar.getInstance();

        DatePickerDialog datePickerDialog = new DatePickerDialog(
                this, new DatePickerDialog.OnDateSetListener() {
            @Override
            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                DestDateText.setText(String.format(Locale.JAPAN, "%02d / %02d / %02d", year, month + 1, dayOfMonth));
            }
        },
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH)
        );
        datePickerDialog.show();
    }
    public void desttimebutton(View view) {

        Calendar calendar = Calendar.getInstance();

        DatePickerDialog datePickerDialog = new DatePickerDialog(
                this, new DatePickerDialog.OnDateSetListener() {
            @Override
            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                DestTimeText.setText(String.format(Locale.JAPAN, "%02d : %02d", desthour, destminutes));
            }
        },
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH)
        );
        datePickerDialog.show();
    }
    public void confirm ( View view){
        @SuppressLint("SimpleDateFormat") SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");

        if (!origf_s.equals("施設から")) {
            if (!destf_s.equals("施設へ")) {
                Calendar calendar = Calendar.getInstance();
                String year_s = String.valueOf(year);
                String month_s = String.valueOf(month);
                String day_s = String.valueOf(day);
                String orighour_s = String.valueOf(orighour);
                String origminutes_s = String.valueOf(origminutes);
                int prepare_i = Integer.parseInt(prepare_s);
                try {
                    date = sdf.parse(year_s + "/" + month_s + "/" + day_s + "/" + orighour_s + ":" + origminutes_s);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                calendar.setTime(date);
                calendar.add(Calendar.MINUTE, prepare_i);
                Date subtracted_time = calendar.getTime();
                o_d_str = origf_s + "から" + destf_s + "まで\n";
                String time_str = sdf.format(subtracted_time);
                String dep_str = "\nに出発します";
                String confirm_s = o_d_str + time_str + dep_str;
                confirm.setText(confirm_s);
            } else if (!dests_s.equals("降り場へ")) {
                Calendar calendar = Calendar.getInstance();
                String year_s = String.valueOf(year);
                String month_s = String.valueOf(month);
                String day_s = String.valueOf(day);
                String desthour_s = String.valueOf(desthour);
                String destminutes_s = String.valueOf(destminutes);
                int allow_i = Integer.parseInt(allow.getText().toString());
                try {
                    date = sdf.parse(year_s + "/" + month_s + "/" + day_s + "/" + desthour_s + ":" + destminutes_s);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                calendar.setTime(date);
                calendar.add(Calendar.MINUTE, allow_i);
                Date subtracted_time = calendar.getTime();
                String o_d_str = origf_s + "から" + dests_s + "まで\n";
                String time_str = sdf.format(subtracted_time);
                String dep_str = "\nに出発します";
                String confirm_s = o_d_str + time_str + dep_str;
                confirm.setText(confirm_s);
            }
        } else if (view.getId() == R.id.current) {
            if (!destf_s.equals("施設へ")) {
                Calendar calendar = Calendar.getInstance();
                String year_s = String.valueOf(year);
                String month_s = String.valueOf(month);
                String day_s = String.valueOf(day);
                String desthour_s = String.valueOf(desthour);
                String destminutes_s = String.valueOf(destminutes);
                int allow_i = Integer.parseInt(allow.getText().toString());
                try {
                    date = sdf.parse(year_s + "/" + month_s + "/" + day_s + "/" + desthour_s + ":" + destminutes_s);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                String current_s = "現在地から";
                String o_d_str = current_s + destf_s + "まで\n";
                calendar.setTime(date);
                calendar.add(Calendar.MINUTE, allow_i);
                Date subtracted_time = calendar.getTime();
                String time_str = sdf.format(subtracted_time);
                String dep_str = "\nに出発します";
                String confirm_s = o_d_str + time_str + dep_str;
                confirm.setText(confirm_s);
            } else if (!dests_s.equals("降り場へ")) {
                Calendar calendar = Calendar.getInstance();
                String year_s = String.valueOf(year);
                String month_s = String.valueOf(month);
                String day_s = String.valueOf(day);
                String desthour_s = String.valueOf(desthour);
                String destminutes_s = String.valueOf(destminutes);
                int allow_i = Integer.parseInt(allow.getText().toString());
                try {
                    date = sdf.parse(year_s + "/" + month_s + "/" + day_s + "/" + desthour_s + ":" + destminutes_s);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                String o_d_str = "現在地から" + dests_s + "まで\n";
                calendar.setTime(date);
                calendar.add(Calendar.MINUTE, allow_i);
                Date subtracted_time = calendar.getTime();
                String time_str = sdf.format(subtracted_time);
                String dep_str = "\nに出発します";
                String confirm_s = o_d_str + time_str + dep_str;
                confirm.setText(confirm_s);
            }
        } else if (!origs_s.equals("乗り場から")) {
            if (!destf_s.equals("施設へ")) {
                Calendar calendar = Calendar.getInstance();
                String year_s = String.valueOf(year);
                String month_s = String.valueOf(month);
                String day_s = String.valueOf(day);
                String orighour_s = String.valueOf(orighour);
                String origminutes_s = String.valueOf(origminutes);
                int prepare_i = Integer.parseInt(prepare.getText().toString());
                try {
                    date = sdf.parse(year_s + "/" + month_s + "/" + day_s + "/" + orighour_s + ":" + origminutes_s);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                String o_d_str = origs_s + "から" + destf_s + "まで\n";
                calendar.setTime(date);
                calendar.add(Calendar.MINUTE, prepare_i);
                Date subtracted_time = calendar.getTime();
                String time_str = sdf.format(subtracted_time);
                String dep_str = "\nに出発します";
                String confirm_s = o_d_str + time_str + dep_str;
                confirm.setText(confirm_s);
            } else if (!dests_s.equals("降り場へ")) {
                Calendar calendar = Calendar.getInstance();
                String year_s = String.valueOf(year);
                String month_s = String.valueOf(month);
                String day_s = String.valueOf(day);
                String desthour_s = String.valueOf(desthour);
                String destminutes_s = String.valueOf(destminutes);
                int allow_i = Integer.parseInt(allow.getText().toString());
                try {
                    date = sdf.parse(year_s + "/" + month_s + "/" + day_s + "/" + desthour_s + ":" + destminutes_s);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                String o_d_str = origs_s + "から" + dests_s + "まで\n";
                calendar.setTime(date);
                calendar.add(Calendar.MINUTE, allow_i);
                Date subtracted_time = calendar.getTime();
                String time_str = sdf.format(subtracted_time);
                String dep_str = "\nに出発します";
                String confirm_s = o_d_str + time_str + dep_str;
                confirm.setText(confirm_s);
            }

        }
    }

    public void timeset( View view){
        Properties props = new Properties();
        props.put("main_android.py", "Yutra");
        props.put("python.console.encoding", "UTF-8");
        PythonInterpreter.initialize(System.getProperties(), props, new String[0]);
        EditText origf = findViewById(R.id.origf);
        PyString origf_s = new PyString(String.valueOf(origf));
        Button current = findViewById(R.id.current);
        PyString current_s = new PyString(String.valueOf(current));
        EditText origs = findViewById(R.id.origs);
        PyString origs_s = new PyString(String.valueOf(origs));
        Button nonstep = findViewById(R.id.nonstep);
        PyString nonstep_s = new PyString(String.valueOf(nonstep));
        EditText prepare = findViewById(R.id.preparetime);
        PyInteger prepare_s = new PyInteger(Integer.parseInt(String.valueOf(prepare)));
        Button before = findViewById(R.id.before);
        PyString before_s = new PyString(String.valueOf(before));
        Button after = findViewById(R.id.after);
        PyString after_s = new PyString(String.valueOf(after));
        EditText destf = findViewById(R.id.destf);
        PyString destf_s = new PyString(String.valueOf(destf));
        EditText dests = findViewById(R.id.dests);
        PyString dests_s = new PyString(String.valueOf(dests));
        EditText allow = findViewById(R.id.allow);
        PyString allow_s = new PyString(String.valueOf(allow));
        PyInteger year_s = new PyInteger(Integer.parseInt(String.valueOf(year)));
        PyInteger month_s = new PyInteger(Integer.parseInt(String.valueOf(month)));
        PyInteger day_s = new PyInteger(Integer.parseInt(String.valueOf(day)));
        PyInteger orig_hour_s = new PyInteger(Integer.parseInt(String.valueOf(orighour)));
        PyInteger orig_minutes_s = new PyInteger(Integer.parseInt(String.valueOf(origminutes)));
        PyInteger dest_hour_s = new PyInteger(Integer.parseInt(String.valueOf(desthour)));
        PyInteger dest_minutes_s = new PyInteger(Integer.parseInt(String.valueOf(destminutes)));

        try (PythonInterpreter interp = new PythonInterpreter()) {

            interp.set("origf_s", origf_s);//10をxに代入
            interp.set("current_s", current_s);
            interp.set("origs_s", origs_s);
            interp.set("nonstep_s", nonstep_s);
            interp.set("prepare_s", prepare_s);
            interp.set("before_s", before_s);
            interp.set("after_s", after_s);
            interp.set("destf_s", destf_s);
            interp.set("dests_s", dests_s);
            interp.set("allow_s", allow_s);
            interp.set("year_s", year_s);
            interp.set("month_s", month_s);
            interp.set("day_s", day_s);
            interp.set("orig_hour_s", orig_hour_s);
            interp.set("orig_minutes_s", orig_minutes_s);
            interp.set("dest_hour_s", dest_hour_s);
            interp.set("dest_minutes_s", dest_minutes_s);
            interp.exec("main_android");
            interp.exec("timeset = main_android.time_set(origf_s,current_s,origs_s,nonstep_s,prepare_s,before_s,after_s,destf_s,dests_s,allow_s,year_s,month_s,day_s,orig_hour_s,orig_minutes_s,dest_hour_s,dest_minutes_s)");
            Intent intent = new Intent(getApplication(), Timeset.class);
            startActivity(intent);
        }

    }

}
